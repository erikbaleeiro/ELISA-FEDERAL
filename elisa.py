#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üõ°Ô∏è ELISA-FEDERAL - Extended Linguistic Intelligence for Security Analysis
üáßüá∑ Sistema Brasileiro de An√°lise de Seguran√ßa Digital

Vers√£o: 1.0.0
Autor: Erik Baleeiro
Licen√ßa: MIT
GitHub: https://github.com/erikbaleeiro/ELISA-FEDERAL

‚öñÔ∏è AVISO LEGAL:
Esta ferramenta √© destinada EXCLUSIVAMENTE para an√°lise de seguran√ßa em recursos
P√öBLICOS com autoriza√ß√£o. O uso inadequado √© de responsabilidade do usu√°rio.
"""

import os
import sys
import json
import argparse
from datetime import datetime
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich import print as rprint
from colorama import init, Fore, Style

# Inicializar colorama
init(autoreset=True)

# Console rico para output bonito
console = Console()

# Importar m√≥dulos do ELISA
try:
    from modules.scanner import VulnerabilityScanner
    from modules.monitor import SecurityMonitor
    from modules.reporter import ReportGenerator
except ImportError as e:
    console.print(f"‚ùå [red]Erro ao importar m√≥dulos: {e}[/red]")
    console.print("üí° [yellow]Execute: pip install -r requirements.txt[/yellow]")
    sys.exit(1)

class ElisaFederal:
    """
    üõ°Ô∏è Classe principal do sistema ELISA-FEDERAL
    Sistema de an√°lise de seguran√ßa digital brasileiro
    """

    def __init__(self):
        self.version = "1.0.0"
        self.scanner = VulnerabilityScanner()
        self.monitor = SecurityMonitor()
        self.reporter = ReportGenerator()

        # Criar diret√≥rios necess√°rios
        self._create_directories()

        # Banner de apresenta√ß√£o
        self._show_banner()

    def _create_directories(self):
        """Cria diret√≥rios necess√°rios para opera√ß√£o"""
        directories = ['logs', 'reports', 'cache', 'temp']

        for directory in directories:
            os.makedirs(directory, exist_ok=True)

    def _show_banner(self):
        """Exibe banner de apresenta√ß√£o do sistema"""
        banner = f"""
üõ°Ô∏è ELISA-FEDERAL v{self.version}
Extended Linguistic Intelligence for Security Analysis

üáßüá∑ Sistema Brasileiro de An√°lise de Seguran√ßa Digital
‚öñÔ∏è Uso exclusivo para an√°lise de recursos P√öBLICOS autorizados
        """

        console.print(Panel(banner, style="bold blue"))

    def _log_action(self, action: str, details: str = ""):
        """Registra a√ß√µes do sistema em log"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {action}"

        if details:
            log_entry += f" - {details}"

        # Salvar em arquivo de log
        with open("logs/elisa.log", "a", encoding="utf-8") as f:
            f.write(log_entry + "\n")

        # Exibir no console
        console.print(f"üìù [dim]{log_entry}[/dim]")

    def scan_target(self, target_url: str, scan_type: str = "basic"):
        """
        Executa scan de seguran√ßa em um alvo

        Args:
            target_url (str): URL do alvo para an√°lise
            scan_type (str): Tipo de scan (basic, full, quick)
        """
        console.print(f"\nüéØ [bold]Iniciando an√°lise de: {target_url}[/bold]")

        self._log_action("SCAN_INITIATED", f"Target: {target_url}, Type: {scan_type}")

        try:
            # Executar scan usando o m√≥dulo scanner
            results = self.scanner.scan(target_url, scan_type)

            # Exibir resultados
            self._display_scan_results(results)

            # Gerar relat√≥rio
            report_path = self.reporter.generate_report(results, target_url)

            console.print(f"\nüìÑ [green]Relat√≥rio salvo em: {report_path}[/green]")

            self._log_action("SCAN_COMPLETED", f"Target: {target_url}")

            return results

        except Exception as e:
            error_msg = f"Erro durante scan: {str(e)}"
            console.print(f"‚ùå [red]{error_msg}[/red]")
            self._log_action("SCAN_ERROR", error_msg)
            return None

    def _display_scan_results(self, results: dict):
        """Exibe resultados do scan em formato tabular"""

        # Tabela de resumo
        summary_table = Table(title="üìä Resumo da An√°lise")
        summary_table.add_column("Categoria", style="cyan")
        summary_table.add_column("Status", style="magenta")
        summary_table.add_column("Detalhes", style="white")

        for category, data in results.items():
            if isinstance(data, dict) and 'status' in data:
                status_color = "green" if data['status'] == 'OK' else "red"
                summary_table.add_row(
                    category.title(),
                    f"[{status_color}]{data['status']}[/{status_color}]",
                    data.get('details', 'N/A')
                )

        console.print(summary_table)

        # Exibir vulnerabilidades encontradas
        if 'vulnerabilities' in results and results['vulnerabilities']:
            vuln_table = Table(title="üö® Vulnerabilidades Detectadas")
            vuln_table.add_column("Severidade", style="red")
            vuln_table.add_column("Tipo", style="yellow")
            vuln_table.add_column("Descri√ß√£o", style="white")

            for vuln in results['vulnerabilities']:
                vuln_table.add_row(
                    vuln.get('severity', 'Unknown'),
                    vuln.get('type', 'Unknown'),
                    vuln.get('description', 'No description')
                )

            console.print(vuln_table)

    def start_monitoring(self, targets: list, interval: int = 300):
        """
        Inicia monitoramento cont√≠nuo de alvos

        Args:
            targets (list): Lista de URLs para monitorar
            interval (int): Intervalo entre verifica√ß√µes em segundos
        """
        console.print(f"\nüîç [bold]Iniciando monitoramento de {len(targets)} alvos[/bold]")
        console.print(f"‚è±Ô∏è Intervalo: {interval} segundos")

        self._log_action("MONITORING_STARTED", f"Targets: {len(targets)}, Interval: {interval}s")

        try:
            self.monitor.start_monitoring(targets, interval, self._monitoring_callback)
        except KeyboardInterrupt:
            console.print("\nüõë [yellow]Monitoramento interrompido pelo usu√°rio[/yellow]")
            self._log_action("MONITORING_STOPPED", "User interrupt")
        except Exception as e:
            error_msg = f"Erro no monitoramento: {str(e)}"
            console.print(f"‚ùå [red]{error_msg}[/red]")
            self._log_action("MONITORING_ERROR", error_msg)

    def _monitoring_callback(self, target: str, status: dict):
        """Callback para eventos de monitoramento"""
        timestamp = datetime.now().strftime("%H:%M:%S")

        if status.get('changed', False):
            console.print(f"üö® [{timestamp}] [red]Mudan√ßa detectada em: {target}[/red]")
        else:
            console.print(f"‚úÖ [{timestamp}] [green]{target} - OK[/green]")

    def show_help(self):
        """Exibe ajuda do sistema"""
        help_text = """
üÜò ELISA-FEDERAL - Ajuda do Sistema

üìã COMANDOS DISPON√çVEIS:

üéØ AN√ÅLISE:
  elisa.py scan <URL>              - Scan b√°sico de seguran√ßa
  elisa.py scan <URL> --full       - Scan completo
  elisa.py scan <URL> --quick      - Scan r√°pido

üîç MONITORAMENTO:
  elisa.py monitor <URL1,URL2>     - Monitorar m√∫ltiplos alvos
  elisa.py monitor <URL> --interval 60  - Intervalo personalizado

üìÑ RELAT√ìRIOS:
  elisa.py report --list           - Listar relat√≥rios salvos
  elisa.py report --view <ID>      - Visualizar relat√≥rio

üõ†Ô∏è SISTEMA:
  elisa.py --version               - Vers√£o do sistema
  elisa.py --help                  - Esta ajuda
  elisa.py --update                - Atualizar do GitHub

üìß SUPORTE:
  GitHub: https://github.com/erikbaleeiro/ELISA-FEDERAL
  Issues: https://github.com/erikbaleeiro/ELISA-FEDERAL/issues

‚öñÔ∏è AVISO LEGAL:
Esta ferramenta √© para an√°lise de recursos P√öBLICOS autorizados apenas.
O uso inadequado √© de responsabilidade exclusiva do usu√°rio.
        """

        console.print(Panel(help_text, style="blue"))

def main():
    """Fun√ß√£o principal do sistema"""
    parser = argparse.ArgumentParser(
        description="üõ°Ô∏è ELISA-FEDERAL - Sistema de An√°lise de Seguran√ßa Digital",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    parser.add_argument('command', nargs='?', help='Comando a executar')
    parser.add_argument('target', nargs='?', help='URL alvo para an√°lise')
    parser.add_argument('--full', action='store_true', help='Scan completo')
    parser.add_argument('--quick', action='store_true', help='Scan r√°pido')
    parser.add_argument('--interval', type=int, default=300, help='Intervalo de monitoramento')
    parser.add_argument('--version', action='store_true', help='Mostrar vers√£o')
    parser.add_argument('--update', action='store_true', help='Atualizar sistema')

    args = parser.parse_args()

    # Inicializar ELISA
    elisa = ElisaFederal()

    # Processar argumentos
    if args.version:
        console.print(f"üõ°Ô∏è ELISA-FEDERAL v{elisa.version}")
        return

    if args.update:
        console.print("üîÑ [yellow]Funcionalidade de atualiza√ß√£o em desenvolvimento[/yellow]")
        return

    if not args.command:
        elisa.show_help()
        return

    # Executar comandos
    if args.command == 'scan':
        if not args.target:
            console.print("‚ùå [red]URL alvo √© obrigat√≥ria para scan[/red]")
            return

        scan_type = 'full' if args.full else 'quick' if args.quick else 'basic'
        elisa.scan_target(args.target, scan_type)

    elif args.command == 'monitor':
        if not args.target:
            console.print("‚ùå [red]URL(s) alvo s√£o obrigat√≥rias para monitoramento[/red]")
            return

        targets = [url.strip() for url in args.target.split(',')]
        elisa.start_monitoring(targets, args.interval)

    elif args.command == 'help':
        elisa.show_help()

    else:
        console.print(f"‚ùå [red]Comando desconhecido: {args.command}[/red]")
        elisa.show_help()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        console.print("\nüõë [yellow]Sistema interrompido pelo usu√°rio[/yellow]")
        sys.exit(0)
    except Exception as e:
        console.print(f"üí• [red]Erro fatal: {str(e)}[/red]")
        sys.exit(1)