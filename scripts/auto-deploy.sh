#!/bin/bash

# üöÄ ELISA-FEDERAL - Script de Deploy Autom√°tico
# Automatiza commit e push para GitHub

echo "üöÄ ELISA-FEDERAL - Deploy Autom√°tico"
echo "===================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se est√° no diret√≥rio do projeto
if [ ! -f "elisa.py" ]; then
    log_error "Execute este script no diret√≥rio do ELISA-FEDERAL"
    exit 1
fi

# Verificar se git est√° inicializado
if [ ! -d ".git" ]; then
    log_warning "Git n√£o inicializado. Inicializando..."
    git init
    git remote add origin https://github.com/erikbaleeiro/ELISA-FEDERAL.git
fi

# Par√¢metros opcionais
COMMIT_MSG="$1"
BRANCH="${2:-main}"

# Se mensagem de commit n√£o foi fornecida, solicitar
if [ -z "$COMMIT_MSG" ]; then
    echo "üìù Digite a mensagem do commit:"
    read -r COMMIT_MSG
fi

# Se ainda estiver vazia, usar mensagem padr√£o
if [ -z "$COMMIT_MSG" ]; then
    COMMIT_MSG="üîÑ Atualiza√ß√£o autom√°tica - $(date '+%Y-%m-%d %H:%M:%S')"
fi

log_info "Verificando status do reposit√≥rio..."

# Verificar se h√° mudan√ßas
if git diff-index --quiet HEAD --; then
    log_warning "Nenhuma mudan√ßa detectada"
    read -p "Continuar mesmo assim? [y/N]: " continue_anyway
    if [[ ! $continue_anyway =~ ^[Yy]$ ]]; then
        log_info "Deploy cancelado"
        exit 0
    fi
fi

# Mostrar status
log_info "Status atual do reposit√≥rio:"
git status --short

echo ""
read -p "ü§î Continuar com o deploy? [Y/n]: " confirm
confirm=${confirm:-Y}

if [[ ! $confirm =~ ^[Yy]$ ]]; then
    log_info "Deploy cancelado pelo usu√°rio"
    exit 0
fi

# Adicionar arquivos
log_info "Adicionando arquivos..."
git add .

# Verificar se h√° arquivos para commit
if git diff-index --quiet --cached HEAD --; then
    log_warning "Nenhuma mudan√ßa para commit"
    exit 0
fi

# Fazer commit
log_info "Fazendo commit: \"$COMMIT_MSG\""
git commit -m "$COMMIT_MSG"

if [ $? -ne 0 ]; then
    log_error "Falha no commit"
    exit 1
fi

log_success "Commit realizado com sucesso"

# Push para GitHub
log_info "Enviando para GitHub (branch: $BRANCH)..."
git push origin $BRANCH

if [ $? -eq 0 ]; then
    log_success "Push realizado com sucesso!"
    echo ""
    echo "üåê Acesse: https://github.com/erikbaleeiro/ELISA-FEDERAL"
else
    log_error "Falha no push"
    echo ""
    echo "üí° Poss√≠veis solu√ß√µes:"
    echo "   1. Verificar credenciais do GitHub"
    echo "   2. Verificar conectividade de internet"
    echo "   3. Verificar se o reposit√≥rio existe"
    echo "   4. Executar: git remote -v"
    exit 1
fi

# Mostrar informa√ß√µes do √∫ltimo commit
echo ""
log_info "Informa√ß√µes do √∫ltimo commit:"
git log --oneline -1

# Mostrar estat√≠sticas
echo ""
log_info "Estat√≠sticas do reposit√≥rio:"
echo "   üìä Total de commits: $(git rev-list --all --count)"
echo "   üìÅ Arquivos rastreados: $(git ls-files | wc -l)"
echo "   üë• Contribuidores: $(git shortlog -sn | wc -l)"

echo ""
log_success "Deploy conclu√≠do com sucesso! üöÄ"